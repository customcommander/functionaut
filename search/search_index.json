{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Functionaut General purpose library for the functional programming hobbyist. Installation npm i @customcommander/functionaut Browser A browser bundle is available and exports the library under the window['@customcommander/functionaut'] namespace: < script src = \"./node_modules/@customcommander/functionaut/dist/browser.min.js\" ></ script > < script > const { map , add } = window [ '@customcommander/functionaut' ]; map ( add ( 42 ))([ 0 , 1 , 2 ]); //=> [42, 43, 44] </ script >","title":"README"},{"location":"#functionaut","text":"General purpose library for the functional programming hobbyist.","title":"Functionaut"},{"location":"#installation","text":"npm i @customcommander/functionaut","title":"Installation"},{"location":"#browser","text":"A browser bundle is available and exports the library under the window['@customcommander/functionaut'] namespace: < script src = \"./node_modules/@customcommander/functionaut/dist/browser.min.js\" ></ script > < script > const { map , add } = window [ '@customcommander/functionaut' ]; map ( add ( 42 ))([ 0 , 1 , 2 ]); //=> [42, 43, 44] </ script >","title":"Browser"},{"location":"CONTRIBUTING/","text":"How to contribute? Thank you for considering making a contribution! TBD","title":"Contribute"},{"location":"CONTRIBUTING/#how-to-contribute","text":"Thank you for considering making a contribution! TBD","title":"How to contribute?"},{"location":"api/F/","text":"F Summary True if x is logical false (i.e. either nil or false ). Examples 1 2 3 4 5 6 F ( null ); //=> true F ( undefined ); //=> true F ( false ); //=> true F ( 0 ); //=> false F ( '' ); //=> false F ( NaN ); //=> false Parameters Name Type Description x ? Return boolean","title":"F"},{"location":"api/F/#f","text":"Summary True if x is logical false (i.e. either nil or false ).","title":"F"},{"location":"api/F/#examples","text":"1 2 3 4 5 6 F ( null ); //=> true F ( undefined ); //=> true F ( false ); //=> true F ( 0 ); //=> false F ( '' ); //=> false F ( NaN ); //=> false","title":"Examples"},{"location":"api/F/#parameters","text":"Name Type Description x ?","title":"Parameters"},{"location":"api/F/#return","text":"boolean","title":"Return"},{"location":"api/T/","text":"T Summary True if x is logical true (i.e. neither nil nor false ). Examples 1 2 3 4 5 6 7 8 9 T ( true ); //=> true T ([]); //=> true T ( 42 ); //=> true T ( 0 ); //=> true T ( '' ); //=> true T ( NaN ); //=> true T ( null ); //=> false T ( undefined ); //=> false T ( false ); //=> false Parameters Name Type Description x ? Return boolean","title":"T"},{"location":"api/T/#t","text":"Summary True if x is logical true (i.e. neither nil nor false ).","title":"T"},{"location":"api/T/#examples","text":"1 2 3 4 5 6 7 8 9 T ( true ); //=> true T ([]); //=> true T ( 42 ); //=> true T ( 0 ); //=> true T ( '' ); //=> true T ( NaN ); //=> true T ( null ); //=> false T ( undefined ); //=> false T ( false ); //=> false","title":"Examples"},{"location":"api/T/#parameters","text":"Name Type Description x ?","title":"Parameters"},{"location":"api/T/#return","text":"boolean","title":"Return"},{"location":"api/__/","text":"__ Summary Functional placeholder .","title":"__"},{"location":"api/__/#__","text":"Summary Functional placeholder .","title":"__"},{"location":"api/add/","text":"add Summary Functional equivalent of a + b . Tip This is an operator function . Examples Add 42 to all numbers. 1 2 map ( add ( 42 ))([ 0 , 1 , 2 ]); //=> [42,43,44] Parameters Name Type Description a number b number Return number","title":"add"},{"location":"api/add/#add","text":"Summary Functional equivalent of a + b . Tip This is an operator function .","title":"add"},{"location":"api/add/#examples","text":"Add 42 to all numbers. 1 2 map ( add ( 42 ))([ 0 , 1 , 2 ]); //=> [42,43,44]","title":"Examples"},{"location":"api/add/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/add/#return","text":"number","title":"Return"},{"location":"api/all/","text":"all Summary Returns true if predicate passed for all elements of the list. Tip This function is curried. Examples Returns true if all elements of a list are equal to x : 1 2 3 4 5 6 7 8 9 10 11 const allx = all ( eq ( 'x' )); // Checking arrays allx ([ 'x' ]); //=> true allx ([ 'x' , 'x' ]); //=> true allx ([ 'x' , 'y' , 'x' ]); //=> false // Checking objects allx ({ a : 'x' }); //=> true allx ({ a : 'x' , b : 'x' }); //=> true allx ({ a : 'x' , b : 'y' , c : 'x' }); //=> false Parameters Name Type Description pred function Predicate xs Array or Object List of values Return boolean","title":"all"},{"location":"api/all/#all","text":"Summary Returns true if predicate passed for all elements of the list. Tip This function is curried.","title":"all"},{"location":"api/all/#examples","text":"Returns true if all elements of a list are equal to x : 1 2 3 4 5 6 7 8 9 10 11 const allx = all ( eq ( 'x' )); // Checking arrays allx ([ 'x' ]); //=> true allx ([ 'x' , 'x' ]); //=> true allx ([ 'x' , 'y' , 'x' ]); //=> false // Checking objects allx ({ a : 'x' }); //=> true allx ({ a : 'x' , b : 'x' }); //=> true allx ({ a : 'x' , b : 'y' , c : 'x' }); //=> false","title":"Examples"},{"location":"api/all/#parameters","text":"Name Type Description pred function Predicate xs Array or Object List of values","title":"Parameters"},{"location":"api/all/#return","text":"boolean","title":"Return"},{"location":"api/allfn/","text":"allfn Summary Returns a function that returns true if all predicates have passed when applied to its arguments. Description Takes one or more predicates and returns a function that takes any number of arguments and returns true if each predicate has returned logical true when applied to these arguments. Examples Make sure that both x and y are numbers and produce the correct answer when added up. 1 2 3 4 5 6 7 8 9 const is_num = x => typeof x == 'number' ; const can_answer = allfn ( ( x , y ) => is_num ( x ) && is_num ( y ) // (1) , ( x , y ) => x + y === 42 ); // (2) can_answer ( 40 , 2 ); //=> true (3) can_answer ( 20 , 30 ); //=> false (4) can_answer ( '40' , 2 ); //=> false (5) 1st predicate: checks both arguments are numbers. 2nd predicate: checks numbers add up to 42. passed: both arguments are numbers and add up to 42. failed: both arguments are numbers but do not add up to 42. failed: 1st argument is not a number. Parameters Name Type Description fn function One or more predicates Return function","title":"allfn"},{"location":"api/allfn/#allfn","text":"Summary Returns a function that returns true if all predicates have passed when applied to its arguments.","title":"allfn"},{"location":"api/allfn/#description","text":"Takes one or more predicates and returns a function that takes any number of arguments and returns true if each predicate has returned logical true when applied to these arguments.","title":"Description"},{"location":"api/allfn/#examples","text":"Make sure that both x and y are numbers and produce the correct answer when added up. 1 2 3 4 5 6 7 8 9 const is_num = x => typeof x == 'number' ; const can_answer = allfn ( ( x , y ) => is_num ( x ) && is_num ( y ) // (1) , ( x , y ) => x + y === 42 ); // (2) can_answer ( 40 , 2 ); //=> true (3) can_answer ( 20 , 30 ); //=> false (4) can_answer ( '40' , 2 ); //=> false (5) 1st predicate: checks both arguments are numbers. 2nd predicate: checks numbers add up to 42. passed: both arguments are numbers and add up to 42. failed: both arguments are numbers but do not add up to 42. failed: 1st argument is not a number.","title":"Examples"},{"location":"api/allfn/#parameters","text":"Name Type Description fn function One or more predicates","title":"Parameters"},{"location":"api/allfn/#return","text":"function","title":"Return"},{"location":"api/and/","text":"and Summary Functional equivalent of a && b but works with logical truth instead of truthy. Tip This is an operator function . Examples 1 2 map ( and ( 42 ))([ 0 , 1 , false ]); //=> [42, 42, false] Parameters Name Type Description a ? b ? Return ?","title":"and"},{"location":"api/and/#and","text":"Summary Functional equivalent of a && b but works with logical truth instead of truthy. Tip This is an operator function .","title":"and"},{"location":"api/and/#examples","text":"1 2 map ( and ( 42 ))([ 0 , 1 , false ]); //=> [42, 42, false]","title":"Examples"},{"location":"api/and/#parameters","text":"Name Type Description a ? b ?","title":"Parameters"},{"location":"api/and/#return","text":"?","title":"Return"},{"location":"api/any/","text":"any Summary True if given predicate returned logical true for at least one element of the list. Tip This function is curried. Examples Check that a list does contain at least one 'x'. 1 2 3 4 5 6 7 const has_x = any ( eq ( 'x' )); has_x ([ 'a' , 'b' , 'c' ]); //=> false has_x ([ 'a' , 'x' , 'c' ]); //=> true has_x ({ m : 'a' , n : 'b' , o : 'c' }); //=> false has_x ({ m : 'a' , n : 'x' , o : 'c' }); //=> true Parameters Name Type Description pred function Predicate xs Array or Object List of values Return boolean","title":"any"},{"location":"api/any/#any","text":"Summary True if given predicate returned logical true for at least one element of the list. Tip This function is curried.","title":"any"},{"location":"api/any/#examples","text":"Check that a list does contain at least one 'x'. 1 2 3 4 5 6 7 const has_x = any ( eq ( 'x' )); has_x ([ 'a' , 'b' , 'c' ]); //=> false has_x ([ 'a' , 'x' , 'c' ]); //=> true has_x ({ m : 'a' , n : 'b' , o : 'c' }); //=> false has_x ({ m : 'a' , n : 'x' , o : 'c' }); //=> true","title":"Examples"},{"location":"api/any/#parameters","text":"Name Type Description pred function Predicate xs Array or Object List of values","title":"Parameters"},{"location":"api/any/#return","text":"boolean","title":"Return"},{"location":"api/anyfn/","text":"anyfn Summary True if one predicate returned logical true when applied to arguments. Description Takes one or more predicates and returns a function that takes any number of arguments and returns true if one predicate returned logical true when applied to these arguments. Returns false if none did. Examples Make sure that both x and y are either numbers or strings. 1 2 3 4 5 6 7 8 9 const is_num = x => typeof x == 'number' ; const is_str = x => typeof x == 'string' ; const num_or_str = anyfn ( ( x , y ) => is_num ( x ) && is_num ( y ) , ( x , y ) => is_str ( x ) && is_str ( y )); num_or_str ( 40 , 2 ); //=> true num_or_str ( '21' , '21' ); //=> true num_or_str ( '40' , 2 ); //=> false Parameters Name Type Description fn function One or more predicates Return function","title":"anyfn"},{"location":"api/anyfn/#anyfn","text":"Summary True if one predicate returned logical true when applied to arguments.","title":"anyfn"},{"location":"api/anyfn/#description","text":"Takes one or more predicates and returns a function that takes any number of arguments and returns true if one predicate returned logical true when applied to these arguments. Returns false if none did.","title":"Description"},{"location":"api/anyfn/#examples","text":"Make sure that both x and y are either numbers or strings. 1 2 3 4 5 6 7 8 9 const is_num = x => typeof x == 'number' ; const is_str = x => typeof x == 'string' ; const num_or_str = anyfn ( ( x , y ) => is_num ( x ) && is_num ( y ) , ( x , y ) => is_str ( x ) && is_str ( y )); num_or_str ( 40 , 2 ); //=> true num_or_str ( '21' , '21' ); //=> true num_or_str ( '40' , 2 ); //=> false","title":"Examples"},{"location":"api/anyfn/#parameters","text":"Name Type Description fn function One or more predicates","title":"Parameters"},{"location":"api/anyfn/#return","text":"function","title":"Return"},{"location":"api/apply/","text":"apply Summary Applies f to xs . Description Takes a function f then a list of arguments xs . Applies f to the arguments and returns the result. Examples Adds the numbers in each tuple. 1 2 map ( apply ( add ))([[ 1 , 2 ],[ 3 , 4 ],[ 5 , 6 ]]); //=> [3,7,11] Parameters Name Type Description f function xs Array Return ?","title":"apply"},{"location":"api/apply/#apply","text":"Summary Applies f to xs .","title":"apply"},{"location":"api/apply/#description","text":"Takes a function f then a list of arguments xs . Applies f to the arguments and returns the result.","title":"Description"},{"location":"api/apply/#examples","text":"Adds the numbers in each tuple. 1 2 map ( apply ( add ))([[ 1 , 2 ],[ 3 , 4 ],[ 5 , 6 ]]); //=> [3,7,11]","title":"Examples"},{"location":"api/apply/#parameters","text":"Name Type Description f function xs Array","title":"Parameters"},{"location":"api/apply/#return","text":"?","title":"Return"},{"location":"api/cease/","text":"cease Summary Exit condition in a loop -induced recursive function. Hold its return value. Parameters Name Type Description value ? Return Object","title":"cease"},{"location":"api/cease/#cease","text":"Summary Exit condition in a loop -induced recursive function. Hold its return value.","title":"cease"},{"location":"api/cease/#parameters","text":"Name Type Description value ?","title":"Parameters"},{"location":"api/cease/#return","text":"Object","title":"Return"},{"location":"api/compose/","text":"compose Summary Performs a right-to-left function composition. Description Given a list of functions returns a new function that takes any number of parameters and applies the rightmost function to them, the result of which is fed into the second rightmost function, etc. Returns the return value of the leftmost function. Examples 1 2 3 const answer = compose ( inc , inc , add ); answer ( 30 , 10 ); //=> 42 Parameters Name Type Description fn function Return function","title":"compose"},{"location":"api/compose/#compose","text":"Summary Performs a right-to-left function composition.","title":"compose"},{"location":"api/compose/#description","text":"Given a list of functions returns a new function that takes any number of parameters and applies the rightmost function to them, the result of which is fed into the second rightmost function, etc. Returns the return value of the leftmost function.","title":"Description"},{"location":"api/compose/#examples","text":"1 2 3 const answer = compose ( inc , inc , add ); answer ( 30 , 10 ); //=> 42","title":"Examples"},{"location":"api/compose/#parameters","text":"Name Type Description fn function","title":"Parameters"},{"location":"api/compose/#return","text":"function","title":"Return"},{"location":"api/cond/","text":"cond Summary Functional equivalent of a switch statement. Description Takes a list of predicate /function pairs and returns a function that takes any number of arguments and applies them to the predicates until one is satisfied. At which point the function associated with that predicate is applied to the same arguments and we take its return value. Predicates must return logical true . Returns undefined when no predicates are satisfied. Examples 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 const record = cond ( ({ age }) => age < 5 , ({ name }) => `Free for ${ name } .` , ({ age }) => age < 12 , ({ name }) => `50% discount for ${ name } .` , ({ age }) => age < 20 , ({ name }) => `20% discount for ${ name } .` , ({ age }) => age < 65 , ({ name }) => `Standard charge for ${ name } .` , ({ age }) => age >= 65 , ({ name }) => `40% discount for ${ name } .` ); record ({ name : 'Harry' , age : 2 }); //=> 'Free for Harry.' record ({ name : 'Jane' , age : 11 }); //=> '50% discount for Jane.' record ({ name : 'Idris' , age : 18 }); //=> '20% discount for Idris.' record ({ name : 'Bob' , age : 40 }); //=> 'Standard charge for Bob.' record ({ name : 'John' , age : 65 }); //=> '40% discount for John.' Parameters Name Type Description fn function Return function","title":"cond"},{"location":"api/cond/#cond","text":"Summary Functional equivalent of a switch statement.","title":"cond"},{"location":"api/cond/#description","text":"Takes a list of predicate /function pairs and returns a function that takes any number of arguments and applies them to the predicates until one is satisfied. At which point the function associated with that predicate is applied to the same arguments and we take its return value. Predicates must return logical true . Returns undefined when no predicates are satisfied.","title":"Description"},{"location":"api/cond/#examples","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 const record = cond ( ({ age }) => age < 5 , ({ name }) => `Free for ${ name } .` , ({ age }) => age < 12 , ({ name }) => `50% discount for ${ name } .` , ({ age }) => age < 20 , ({ name }) => `20% discount for ${ name } .` , ({ age }) => age < 65 , ({ name }) => `Standard charge for ${ name } .` , ({ age }) => age >= 65 , ({ name }) => `40% discount for ${ name } .` ); record ({ name : 'Harry' , age : 2 }); //=> 'Free for Harry.' record ({ name : 'Jane' , age : 11 }); //=> '50% discount for Jane.' record ({ name : 'Idris' , age : 18 }); //=> '20% discount for Idris.' record ({ name : 'Bob' , age : 40 }); //=> 'Standard charge for Bob.' record ({ name : 'John' , age : 65 }); //=> '40% discount for John.'","title":"Examples"},{"location":"api/cond/#parameters","text":"Name Type Description fn function","title":"Parameters"},{"location":"api/cond/#return","text":"function","title":"Return"},{"location":"api/constant/","text":"constant Summary Takes a x and returns a function that always returns x . Examples 1 2 3 4 5 6 7 const answer = constant ( 42 ); answer (); //=> 42 answer ( 'foobar' ); //=> 42 Parameters Name Type Description x ? Return function","title":"constant"},{"location":"api/constant/#constant","text":"Summary Takes a x and returns a function that always returns x .","title":"constant"},{"location":"api/constant/#examples","text":"1 2 3 4 5 6 7 const answer = constant ( 42 ); answer (); //=> 42 answer ( 'foobar' ); //=> 42","title":"Examples"},{"location":"api/constant/#parameters","text":"Name Type Description x ?","title":"Parameters"},{"location":"api/constant/#return","text":"function","title":"Return"},{"location":"api/curry/","text":"curry Summary Return a curried version of fn . Examples 1 2 3 4 const add = curry (( a , b ) => a + b ); [ 1 , 2 , 3 ]. map ( add ( 10 )); //=> [11, 12, 13] Parameters Name Type Description fn function Function to curry. Return function","title":"curry"},{"location":"api/curry/#curry","text":"Summary Return a curried version of fn .","title":"curry"},{"location":"api/curry/#examples","text":"1 2 3 4 const add = curry (( a , b ) => a + b ); [ 1 , 2 , 3 ]. map ( add ( 10 )); //=> [11, 12, 13]","title":"Examples"},{"location":"api/curry/#parameters","text":"Name Type Description fn function Function to curry.","title":"Parameters"},{"location":"api/curry/#return","text":"function","title":"Return"},{"location":"api/dec/","text":"dec Summary Take 1 away from x . Examples 1 2 dec ( 43 ); //=> 42 Parameters Name Type Description x number Any number Return number","title":"dec"},{"location":"api/dec/#dec","text":"Summary Take 1 away from x .","title":"dec"},{"location":"api/dec/#examples","text":"1 2 dec ( 43 ); //=> 42","title":"Examples"},{"location":"api/dec/#parameters","text":"Name Type Description x number Any number","title":"Parameters"},{"location":"api/dec/#return","text":"number","title":"Return"},{"location":"api/div/","text":"div Summary Functional equivalent of a / b . Tip This is an operator function . Examples 1 2 map ( div ( 4 ))([ 20 , 40 , 60 , 80 ]) //=> [5,10,15,20] Parameters Name Type Description a number b number Return number","title":"div"},{"location":"api/div/#div","text":"Summary Functional equivalent of a / b . Tip This is an operator function .","title":"div"},{"location":"api/div/#examples","text":"1 2 map ( div ( 4 ))([ 20 , 40 , 60 , 80 ]) //=> [5,10,15,20]","title":"Examples"},{"location":"api/div/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/div/#return","text":"number","title":"Return"},{"location":"api/drop/","text":"drop Summary Returns a new list without the first n elements of the original list. Tip This function is curried. Tip Act as a transducer when composed with take , filter or map . Description Drops the first n items from xs and returns the rest in a new list of the same type. When n is 0 or negative drop does nothing. When n is larger than the number of items drop returns an empty list of the same type. Examples Works with arrays and objects 1 2 3 4 5 6 7 const drop2 = drop ( 2 ); drop2 ([ 1 , 2 , 3 ]); //=> [3] drop2 ({ a : 1 , b : 2 , c : 3 }); //=> {c: 3} Parameters Name Type Description n number Number of items to drop. xs Array or Object List to drop from. Return Array or Object","title":"drop"},{"location":"api/drop/#drop","text":"Summary Returns a new list without the first n elements of the original list. Tip This function is curried. Tip Act as a transducer when composed with take , filter or map .","title":"drop"},{"location":"api/drop/#description","text":"Drops the first n items from xs and returns the rest in a new list of the same type. When n is 0 or negative drop does nothing. When n is larger than the number of items drop returns an empty list of the same type.","title":"Description"},{"location":"api/drop/#examples","text":"Works with arrays and objects 1 2 3 4 5 6 7 const drop2 = drop ( 2 ); drop2 ([ 1 , 2 , 3 ]); //=> [3] drop2 ({ a : 1 , b : 2 , c : 3 }); //=> {c: 3}","title":"Examples"},{"location":"api/drop/#parameters","text":"Name Type Description n number Number of items to drop. xs Array or Object List to drop from.","title":"Parameters"},{"location":"api/drop/#return","text":"Array or Object","title":"Return"},{"location":"api/eq/","text":"eq Summary Functional equivalent of a === b . Use Object.is . Tip This is an operator function . Examples 1 2 3 4 5 const eq42 = eq ( 42 ); eq42 ( 42 ); //=> true eq42 ( '42' ); //=> false (1) eq ( NaN , NaN ); //=> true failed: not the same type Parameters Name Type Description a ? b ? Return boolean","title":"eq"},{"location":"api/eq/#eq","text":"Summary Functional equivalent of a === b . Use Object.is . Tip This is an operator function .","title":"eq"},{"location":"api/eq/#examples","text":"1 2 3 4 5 const eq42 = eq ( 42 ); eq42 ( 42 ); //=> true eq42 ( '42' ); //=> false (1) eq ( NaN , NaN ); //=> true failed: not the same type","title":"Examples"},{"location":"api/eq/#parameters","text":"Name Type Description a ? b ?","title":"Parameters"},{"location":"api/eq/#return","text":"boolean","title":"Return"},{"location":"api/exp/","text":"exp Summary Functional equivalent of a ** b . Tip This is an operator function . Examples 1 2 map ( exp ( 2 ))([ 2 , 3 , 4 , 5 ]); //=> [4,9,16,25] Parameters Name Type Description a number b number Return number","title":"exp"},{"location":"api/exp/#exp","text":"Summary Functional equivalent of a ** b . Tip This is an operator function .","title":"exp"},{"location":"api/exp/#examples","text":"1 2 map ( exp ( 2 ))([ 2 , 3 , 4 , 5 ]); //=> [4,9,16,25]","title":"Examples"},{"location":"api/exp/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/exp/#return","text":"number","title":"Return"},{"location":"api/fallback/","text":"fallback Summary Functional equilvant of a ?? b . Tip This is an operator function . Examples 1 2 3 4 5 6 7 const your_name = fallback ( 'john doe' ); your_name ( 'tom' ); //=> 'tom' your_name ( null ); //=> 'john doe' Parameters Name Type Description a ? Any b ? Any Return ?","title":"fallback"},{"location":"api/fallback/#fallback","text":"Summary Functional equilvant of a ?? b . Tip This is an operator function .","title":"fallback"},{"location":"api/fallback/#examples","text":"1 2 3 4 5 6 7 const your_name = fallback ( 'john doe' ); your_name ( 'tom' ); //=> 'tom' your_name ( null ); //=> 'john doe'","title":"Examples"},{"location":"api/fallback/#parameters","text":"Name Type Description a ? Any b ? Any","title":"Parameters"},{"location":"api/fallback/#return","text":"?","title":"Return"},{"location":"api/filter/","text":"filter Summary Returns a new list with only the elements that passed a predicate . Tip This function is curried. Tip Act as a transducer when composed with drop , take or map . Description Keeps the elements in xs that satisfied the predicate fn and returns a new list of the same type. The predicate must return logical true . Examples Works with arrays and objects 1 2 3 4 5 6 7 const even = filter ( x => x % 2 === 0 ); even ([ 1 , 2 , 3 , 4 ]); //=> [2, 3] even ({ a : 1 , b : 2 , c : 3 , d : 4 }); //=> {b: 2, d: 4} Parameters Name Type Description pred function xs Array or Object Return Array or Object","title":"filter"},{"location":"api/filter/#filter","text":"Summary Returns a new list with only the elements that passed a predicate . Tip This function is curried. Tip Act as a transducer when composed with drop , take or map .","title":"filter"},{"location":"api/filter/#description","text":"Keeps the elements in xs that satisfied the predicate fn and returns a new list of the same type. The predicate must return logical true .","title":"Description"},{"location":"api/filter/#examples","text":"Works with arrays and objects 1 2 3 4 5 6 7 const even = filter ( x => x % 2 === 0 ); even ([ 1 , 2 , 3 , 4 ]); //=> [2, 3] even ({ a : 1 , b : 2 , c : 3 , d : 4 }); //=> {b: 2, d: 4}","title":"Examples"},{"location":"api/filter/#parameters","text":"Name Type Description pred function xs Array or Object","title":"Parameters"},{"location":"api/filter/#return","text":"Array or Object","title":"Return"},{"location":"api/flip/","text":"flip Summary Swap the first two arguments of a function. Description Take a function fn of arity 2 (or more) and return a curried version of it where the first two parameters have been swapped. Examples 1 2 3 4 5 6 7 8 9 const x = ( a , b , c ) => a + b + c ; x ( 'foo' , 'bar' , 'baz' ); //=> 'foobarbaz' const y = flip ( x ); y ( 'foo' )( 'bar' , 'baz' ); //=> 'barfoobaz' Parameters Name Type Description fn function Return function","title":"flip"},{"location":"api/flip/#flip","text":"Summary Swap the first two arguments of a function.","title":"flip"},{"location":"api/flip/#description","text":"Take a function fn of arity 2 (or more) and return a curried version of it where the first two parameters have been swapped.","title":"Description"},{"location":"api/flip/#examples","text":"1 2 3 4 5 6 7 8 9 const x = ( a , b , c ) => a + b + c ; x ( 'foo' , 'bar' , 'baz' ); //=> 'foobarbaz' const y = flip ( x ); y ( 'foo' )( 'bar' , 'baz' ); //=> 'barfoobaz'","title":"Examples"},{"location":"api/flip/#parameters","text":"Name Type Description fn function","title":"Parameters"},{"location":"api/flip/#return","text":"function","title":"Return"},{"location":"api/fold/","text":"fold Summary Reduce a list. Tip This function is curried. Description Reduce a list xs by applying f first to the initial value and the first element of the list, then to value returned by the previous reduction and subsequent element of the list. Examples Product of a list 1 2 3 4 const product = fold ( mult , 1 ); product ([ 1 , 2 , 3 , 4 ]); //=> 24 Parameters Name Type Description f function Binary function. init ? Initial value xs ? A list (either an array or an object) Return ?","title":"fold"},{"location":"api/fold/#fold","text":"Summary Reduce a list. Tip This function is curried.","title":"fold"},{"location":"api/fold/#description","text":"Reduce a list xs by applying f first to the initial value and the first element of the list, then to value returned by the previous reduction and subsequent element of the list.","title":"Description"},{"location":"api/fold/#examples","text":"Product of a list 1 2 3 4 const product = fold ( mult , 1 ); product ([ 1 , 2 , 3 , 4 ]); //=> 24","title":"Examples"},{"location":"api/fold/#parameters","text":"Name Type Description f function Binary function. init ? Initial value xs ? A list (either an array or an object)","title":"Parameters"},{"location":"api/fold/#return","text":"?","title":"Return"},{"location":"api/gt/","text":"gt Summary Functional equivalent of a > b . Tip This is an operator function . Examples Keep numbers greater than 5 : 1 2 filter ( gt ( 5 ))([ 2 , 4 , 6 , 8 ]); //=> [6,8] Parameters Name Type Description a number b number Return boolean","title":"gt"},{"location":"api/gt/#gt","text":"Summary Functional equivalent of a > b . Tip This is an operator function .","title":"gt"},{"location":"api/gt/#examples","text":"Keep numbers greater than 5 : 1 2 filter ( gt ( 5 ))([ 2 , 4 , 6 , 8 ]); //=> [6,8]","title":"Examples"},{"location":"api/gt/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/gt/#return","text":"boolean","title":"Return"},{"location":"api/gte/","text":"gte Summary Functional equivalent of a >= b . Tip This is an operator function . Examples Keep numbers greater than or equal to 3 : 1 2 filter ( gte ( 3 ))([ 1 , 2 , 3 , 4 ]); //=> [3,4] Parameters Name Type Description a number b number Return boolean","title":"gte"},{"location":"api/gte/#gte","text":"Summary Functional equivalent of a >= b . Tip This is an operator function .","title":"gte"},{"location":"api/gte/#examples","text":"Keep numbers greater than or equal to 3 : 1 2 filter ( gte ( 3 ))([ 1 , 2 , 3 , 4 ]); //=> [3,4]","title":"Examples"},{"location":"api/gte/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/gte/#return","text":"boolean","title":"Return"},{"location":"api/identity/","text":"identity Summary Return its argument. Examples 1 2 identity ( 42 ); //=> 42 Parameters Name Type Description x ? Return ?","title":"identity"},{"location":"api/identity/#identity","text":"Summary Return its argument.","title":"identity"},{"location":"api/identity/#examples","text":"1 2 identity ( 42 ); //=> 42","title":"Examples"},{"location":"api/identity/#parameters","text":"Name Type Description x ?","title":"Parameters"},{"location":"api/identity/#return","text":"?","title":"Return"},{"location":"api/inc/","text":"inc Summary Add 1 to x . Examples 1 2 inc ( 41 ); //=> 42 Parameters Name Type Description x number Any number Return number","title":"inc"},{"location":"api/inc/#inc","text":"Summary Add 1 to x .","title":"inc"},{"location":"api/inc/#examples","text":"1 2 inc ( 41 ); //=> 42","title":"Examples"},{"location":"api/inc/#parameters","text":"Name Type Description x number Any number","title":"Parameters"},{"location":"api/inc/#return","text":"number","title":"Return"},{"location":"api/into/","text":"into Summary Transform a list into another list. Tip This function is curried. Description Reduces a list into another list (not necessarily of the same type) by applying a serie of transformations ( transducer ) to each value of the list in a single iteration. The transducer is defined by composing list functions together. Be aware that due to the nature of transducers the order of execution will be left to right. Examples Map over the elements and accumulate into a string: 1 2 into ( '' , map ( inc ), [ 10 , 20 , 30 ]); //=> '112131' Map over the properties and accumulate into an array: 1 2 into ([], map ( inc ), { a : 10 , b : 20 , c : 30 }); //=> [11, 21, 31] Transducer example: take only the first two elements, increment them and accumulate into a string: 1 2 into ( '' , compose ( take ( 2 ), map ( inc )), [ 10 , 20 , 30 ]); //=> '1121' Parameters Name Type Description init Array , Object or string transducer function xs Array or Object Return Array , Object or string","title":"into"},{"location":"api/into/#into","text":"Summary Transform a list into another list. Tip This function is curried.","title":"into"},{"location":"api/into/#description","text":"Reduces a list into another list (not necessarily of the same type) by applying a serie of transformations ( transducer ) to each value of the list in a single iteration. The transducer is defined by composing list functions together. Be aware that due to the nature of transducers the order of execution will be left to right.","title":"Description"},{"location":"api/into/#examples","text":"Map over the elements and accumulate into a string: 1 2 into ( '' , map ( inc ), [ 10 , 20 , 30 ]); //=> '112131' Map over the properties and accumulate into an array: 1 2 into ([], map ( inc ), { a : 10 , b : 20 , c : 30 }); //=> [11, 21, 31] Transducer example: take only the first two elements, increment them and accumulate into a string: 1 2 into ( '' , compose ( take ( 2 ), map ( inc )), [ 10 , 20 , 30 ]); //=> '1121'","title":"Examples"},{"location":"api/into/#parameters","text":"Name Type Description init Array , Object or string transducer function xs Array or Object","title":"Parameters"},{"location":"api/into/#return","text":"Array , Object or string","title":"Return"},{"location":"api/juxt/","text":"juxt Summary Applies a series of functions to a series of values. Description Take one or more functions then take one or more values. Return an array with the results of applying each function to the values. Examples Producing a restaurant bill: 1 2 3 4 5 6 7 8 9 const items = (... xs ) => xs . map (([ i ]) => i ). join ( ', ' ); const total = (... xs ) => xs . reduce (( t , [, p ]) => t + p , 0 ); const bill = juxt ( items , total ); bill ( [ 'burrito' , 5.50 ] , [ 'beer' , 4.50 ] , [ 'coffee' , 2.80 ]); //=> [\"burrito, beer, coffee\", 12.8] Parameters Name Type Description fn function Return function","title":"juxt"},{"location":"api/juxt/#juxt","text":"Summary Applies a series of functions to a series of values.","title":"juxt"},{"location":"api/juxt/#description","text":"Take one or more functions then take one or more values. Return an array with the results of applying each function to the values.","title":"Description"},{"location":"api/juxt/#examples","text":"Producing a restaurant bill: 1 2 3 4 5 6 7 8 9 const items = (... xs ) => xs . map (([ i ]) => i ). join ( ', ' ); const total = (... xs ) => xs . reduce (( t , [, p ]) => t + p , 0 ); const bill = juxt ( items , total ); bill ( [ 'burrito' , 5.50 ] , [ 'beer' , 4.50 ] , [ 'coffee' , 2.80 ]); //=> [\"burrito, beer, coffee\", 12.8]","title":"Examples"},{"location":"api/juxt/#parameters","text":"Name Type Description fn function","title":"Parameters"},{"location":"api/juxt/#return","text":"function","title":"Return"},{"location":"api/loop/","text":"loop Summary Generates a stack-safe recursive function. Description Colloquially known as \"trampoline\" this function allows you to implement stack-safe recursive functions. You must use recur to bootstrap the next recursive call and cease to signal the exit condition and the return value. Examples Without tail call optimization recursive functions can exhaust the stack: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const nums = ( x , y , ret = []) => ( x === y ? ret : nums ( x + 1 , y , ( ret . push ( x ), ret ))); nums ( 1 , 1000 ); //=> [ //=> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, //=> 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, //=> 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, //=> 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, //=> 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, //=> 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, //=> 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, //=> 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, //=> 97, 98, 99, 100, //=> ... 899 more items //=> ] nums ( 1 , 10000 ); //=> Uncaught RangeError: Maximum call stack size exceeded With loop/recur you can build the same recursive function without fear: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const nums = loop (( x , y , ret = []) => ( x === y ? cease ( ret ) : recur ( x + 1 , y , ( ret . push ( x ), ret )))); nums ( 1 , 100000 ); // \u00d7 10 more! //=> [ //=> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, //=> 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, //=> 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, //=> 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, //=> 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, //=> 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, //=> 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, //=> 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, //=> 97, 98, 99, 100, //=> ... 99899 more items //=> ] Parameters Name Type Description fn function Return function","title":"loop"},{"location":"api/loop/#loop","text":"Summary Generates a stack-safe recursive function.","title":"loop"},{"location":"api/loop/#description","text":"Colloquially known as \"trampoline\" this function allows you to implement stack-safe recursive functions. You must use recur to bootstrap the next recursive call and cease to signal the exit condition and the return value.","title":"Description"},{"location":"api/loop/#examples","text":"Without tail call optimization recursive functions can exhaust the stack: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const nums = ( x , y , ret = []) => ( x === y ? ret : nums ( x + 1 , y , ( ret . push ( x ), ret ))); nums ( 1 , 1000 ); //=> [ //=> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, //=> 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, //=> 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, //=> 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, //=> 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, //=> 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, //=> 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, //=> 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, //=> 97, 98, 99, 100, //=> ... 899 more items //=> ] nums ( 1 , 10000 ); //=> Uncaught RangeError: Maximum call stack size exceeded With loop/recur you can build the same recursive function without fear: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const nums = loop (( x , y , ret = []) => ( x === y ? cease ( ret ) : recur ( x + 1 , y , ( ret . push ( x ), ret )))); nums ( 1 , 100000 ); // \u00d7 10 more! //=> [ //=> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, //=> 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, //=> 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, //=> 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, //=> 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, //=> 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, //=> 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, //=> 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, //=> 97, 98, 99, 100, //=> ... 99899 more items //=> ]","title":"Examples"},{"location":"api/loop/#parameters","text":"Name Type Description fn function","title":"Parameters"},{"location":"api/loop/#return","text":"function","title":"Return"},{"location":"api/lower/","text":"lower Summary Returns s lowercased. Examples 1 2 lower ( 'FOO' ); //=> 'foo' Parameters Name Type Description s string Return string","title":"lower"},{"location":"api/lower/#lower","text":"Summary Returns s lowercased.","title":"lower"},{"location":"api/lower/#examples","text":"1 2 lower ( 'FOO' ); //=> 'foo'","title":"Examples"},{"location":"api/lower/#parameters","text":"Name Type Description s string","title":"Parameters"},{"location":"api/lower/#return","text":"string","title":"Return"},{"location":"api/lt/","text":"lt Summary Functional equivalent of a < b . Tip This is an operator function . Examples Keep numbers lower than 5 : 1 2 filter ( lt ( 5 ))([ 2 , 4 , 6 , 8 ]); //=> [2,4] Parameters Name Type Description a number b number Return boolean","title":"lt"},{"location":"api/lt/#lt","text":"Summary Functional equivalent of a < b . Tip This is an operator function .","title":"lt"},{"location":"api/lt/#examples","text":"Keep numbers lower than 5 : 1 2 filter ( lt ( 5 ))([ 2 , 4 , 6 , 8 ]); //=> [2,4]","title":"Examples"},{"location":"api/lt/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/lt/#return","text":"boolean","title":"Return"},{"location":"api/lte/","text":"lte Summary Functional equivalent of a <= b . Tip This is an operator function . Examples Keep numbers lower than or equal to 3 : 1 2 filter ( lte ( 3 ))([ 1 , 2 , 3 , 4 , 5 ]); //=> [1,2,3] Parameters Name Type Description a number b number Return boolean","title":"lte"},{"location":"api/lte/#lte","text":"Summary Functional equivalent of a <= b . Tip This is an operator function .","title":"lte"},{"location":"api/lte/#examples","text":"Keep numbers lower than or equal to 3 : 1 2 filter ( lte ( 3 ))([ 1 , 2 , 3 , 4 , 5 ]); //=> [1,2,3]","title":"Examples"},{"location":"api/lte/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/lte/#return","text":"boolean","title":"Return"},{"location":"api/map/","text":"map Summary Apply a function to each element of a list. Tip This function is curried. Tip Act as a transducer when composed with drop , take or filter . Description Take a function fn then a list xs . Return a list of the same type with the result of applying fn to each element of xs . Examples Works with arrays and objects. 1 2 3 4 5 6 7 const double = map ( x => x + x ); double ([ 1 , 2 , 3 ]); //=> [2, 4, 6] double ({ a : 1 , b : 2 , c : 3 }); //=> {a: 2, b: 4, c: 6} Parameters Name Type Description fn function xs Array or Object Return Array or Object","title":"map"},{"location":"api/map/#map","text":"Summary Apply a function to each element of a list. Tip This function is curried. Tip Act as a transducer when composed with drop , take or filter .","title":"map"},{"location":"api/map/#description","text":"Take a function fn then a list xs . Return a list of the same type with the result of applying fn to each element of xs .","title":"Description"},{"location":"api/map/#examples","text":"Works with arrays and objects. 1 2 3 4 5 6 7 const double = map ( x => x + x ); double ([ 1 , 2 , 3 ]); //=> [2, 4, 6] double ({ a : 1 , b : 2 , c : 3 }); //=> {a: 2, b: 4, c: 6}","title":"Examples"},{"location":"api/map/#parameters","text":"Name Type Description fn function xs Array or Object","title":"Parameters"},{"location":"api/map/#return","text":"Array or Object","title":"Return"},{"location":"api/mod/","text":"mod Summary Functional equivalent of a % b . Tip This is an operator function . Examples 1 2 map ( mod ( 4 ))([ 10 , 15 , 20 , 25 ]); //=> [2,3,0,1] Parameters Name Type Description a number b number Return number","title":"mod"},{"location":"api/mod/#mod","text":"Summary Functional equivalent of a % b . Tip This is an operator function .","title":"mod"},{"location":"api/mod/#examples","text":"1 2 map ( mod ( 4 ))([ 10 , 15 , 20 , 25 ]); //=> [2,3,0,1]","title":"Examples"},{"location":"api/mod/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/mod/#return","text":"number","title":"Return"},{"location":"api/mult/","text":"mult Summary Functional equivalent of a * b . Tip This is an operator function . Examples 1 2 map ( mult ( 2 ))([ 5 , 10 , 15 ]); //=> [10,20,30] Parameters Name Type Description a number b number Return number","title":"mult"},{"location":"api/mult/#mult","text":"Summary Functional equivalent of a * b . Tip This is an operator function .","title":"mult"},{"location":"api/mult/#examples","text":"1 2 map ( mult ( 2 ))([ 5 , 10 , 15 ]); //=> [10,20,30]","title":"Examples"},{"location":"api/mult/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/mult/#return","text":"number","title":"Return"},{"location":"api/ne/","text":"ne Summary Functional equivalent of a !== b . Use Object.is . Tip This is an operator function . Examples 1 2 3 4 5 ne ( null , undefined ); //=> true ne ( NaN , NaN ); //=> false Parameters Name Type Description a ? b ? Return boolean","title":"ne"},{"location":"api/ne/#ne","text":"Summary Functional equivalent of a !== b . Use Object.is . Tip This is an operator function .","title":"ne"},{"location":"api/ne/#examples","text":"1 2 3 4 5 ne ( null , undefined ); //=> true ne ( NaN , NaN ); //=> false","title":"Examples"},{"location":"api/ne/#parameters","text":"Name Type Description a ? b ?","title":"Parameters"},{"location":"api/ne/#return","text":"boolean","title":"Return"},{"location":"api/nil/","text":"nil Summary True if x is nil . Examples 1 2 3 4 5 6 7 8 9 10 11 nil ( null ); //=> true nil ( undefined ); //=> true nil ( false ); //=> false nil ( NaN ); //=> false Parameters Name Type Description x ? Any Return boolean","title":"nil"},{"location":"api/nil/#nil","text":"Summary True if x is nil .","title":"nil"},{"location":"api/nil/#examples","text":"1 2 3 4 5 6 7 8 9 10 11 nil ( null ); //=> true nil ( undefined ); //=> true nil ( false ); //=> false nil ( NaN ); //=> false","title":"Examples"},{"location":"api/nil/#parameters","text":"Name Type Description x ? Any","title":"Parameters"},{"location":"api/nil/#return","text":"boolean","title":"Return"},{"location":"api/none/","text":"none Summary True if no elements of a list satisfied given predicate . Tip This function is curried. Description Returns true if predicate returned logical false for all elements of the list. When a predicate returns logical true , the function returns false immediately. Examples Check that a list does not contain any 'x' 1 2 3 4 5 6 7 const no_x = none ( eq ( 'x' )); no_x ([ 'a' , 'b' , 'c' ]); //=> true no_x ([ 'a' , 'x' , 'c' ]); //=> false no_x ({ m : 'a' , n : 'b' , o : 'c' }); //=> true no_x ({ m : 'a' , n : 'x' , o : 'c' }); //=> false Parameters Name Type Description pred function Predicate xs Array or Object List of values Return boolean","title":"none"},{"location":"api/none/#none","text":"Summary True if no elements of a list satisfied given predicate . Tip This function is curried.","title":"none"},{"location":"api/none/#description","text":"Returns true if predicate returned logical false for all elements of the list. When a predicate returns logical true , the function returns false immediately.","title":"Description"},{"location":"api/none/#examples","text":"Check that a list does not contain any 'x' 1 2 3 4 5 6 7 const no_x = none ( eq ( 'x' )); no_x ([ 'a' , 'b' , 'c' ]); //=> true no_x ([ 'a' , 'x' , 'c' ]); //=> false no_x ({ m : 'a' , n : 'b' , o : 'c' }); //=> true no_x ({ m : 'a' , n : 'x' , o : 'c' }); //=> false","title":"Examples"},{"location":"api/none/#parameters","text":"Name Type Description pred function Predicate xs Array or Object List of values","title":"Parameters"},{"location":"api/none/#return","text":"boolean","title":"Return"},{"location":"api/nonefn/","text":"nonefn Summary True if no predicates passed when applied to arguments. Description Takes one or more predicates and returns a function that takes any number of arguments and returns true if no predicates returned logical true when applied to these arguments. Returns false if one did. Examples Make sure that both x and y are neither numbers or strings. 1 2 3 4 5 6 7 8 9 10 const is_num = x => typeof x == 'number' ; const is_str = x => typeof x == 'string' ; const no_num_or_str = nonefn ( ( x , _ ) => is_num ( x ) || is_str ( x ) , ( _ , y ) => is_str ( y ) || is_str ( y )); no_num_or_str ( 40 , 2 ); //=> false no_num_or_str ( '21' , '21' ); //=> false no_num_or_str ( '40' , 2 ); //=> false no_num_or_str ([ '40' ], { x : 2 }); //=> true Parameters Name Type Description pred function One or more predicates Return function","title":"nonefn"},{"location":"api/nonefn/#nonefn","text":"Summary True if no predicates passed when applied to arguments.","title":"nonefn"},{"location":"api/nonefn/#description","text":"Takes one or more predicates and returns a function that takes any number of arguments and returns true if no predicates returned logical true when applied to these arguments. Returns false if one did.","title":"Description"},{"location":"api/nonefn/#examples","text":"Make sure that both x and y are neither numbers or strings. 1 2 3 4 5 6 7 8 9 10 const is_num = x => typeof x == 'number' ; const is_str = x => typeof x == 'string' ; const no_num_or_str = nonefn ( ( x , _ ) => is_num ( x ) || is_str ( x ) , ( _ , y ) => is_str ( y ) || is_str ( y )); no_num_or_str ( 40 , 2 ); //=> false no_num_or_str ( '21' , '21' ); //=> false no_num_or_str ( '40' , 2 ); //=> false no_num_or_str ([ '40' ], { x : 2 }); //=> true","title":"Examples"},{"location":"api/nonefn/#parameters","text":"Name Type Description pred function One or more predicates","title":"Parameters"},{"location":"api/nonefn/#return","text":"function","title":"Return"},{"location":"api/on/","text":"on Summary Apply f to the result of g(a) and g(b) . Tip This function is curried. Examples Building a case-insensitive string comparison function. 1 2 3 4 const streqi = on ( eq , lower ); // i.e. (a, b) => eq(lower(a), lower(b)) streqi ( 'FOObar' , 'fooBAR' ); //=> true Parameters Name Type Description f function Binary function. g function Unary function. a ? Any value. b ? Any value. Return ?","title":"on"},{"location":"api/on/#on","text":"Summary Apply f to the result of g(a) and g(b) . Tip This function is curried.","title":"on"},{"location":"api/on/#examples","text":"Building a case-insensitive string comparison function. 1 2 3 4 const streqi = on ( eq , lower ); // i.e. (a, b) => eq(lower(a), lower(b)) streqi ( 'FOObar' , 'fooBAR' ); //=> true","title":"Examples"},{"location":"api/on/#parameters","text":"Name Type Description f function Binary function. g function Unary function. a ? Any value. b ? Any value.","title":"Parameters"},{"location":"api/on/#return","text":"?","title":"Return"},{"location":"api/or/","text":"or Summary Functional equivalent of a || b but works with logical truth instead of truthy. Tip This is an operator function . Examples 1 2 map ( or ( 42 ))([ 0 , 1 , false ]); //=> [0, 1, 42] Parameters Name Type Description a ? b ? Return ?","title":"or"},{"location":"api/or/#or","text":"Summary Functional equivalent of a || b but works with logical truth instead of truthy. Tip This is an operator function .","title":"or"},{"location":"api/or/#examples","text":"1 2 map ( or ( 42 ))([ 0 , 1 , false ]); //=> [0, 1, 42]","title":"Examples"},{"location":"api/or/#parameters","text":"Name Type Description a ? b ?","title":"Parameters"},{"location":"api/or/#return","text":"?","title":"Return"},{"location":"api/partial/","text":"partial Summary Allows the partial application of a non-curried function. Description Takes a function f and a list of initial arguments and returns a new function that takes the remaining arguments and applies f to both lists of arguments. Examples 1 2 3 4 5 6 7 const msg = ( a , b , c ) => ` ${ a } ${ b } ${ c } ` ; partial ( msg , 'Hello' )( 'World' , '!' ); //=> \"Hello World !\" partial ( msg , 'Hello' , 'World' )( '!' ); //=> \"Hello World !\" Parameters Name Type Description f function The partially applied function. init ? The initial list of arguments Return function","title":"partial"},{"location":"api/partial/#partial","text":"Summary Allows the partial application of a non-curried function.","title":"partial"},{"location":"api/partial/#description","text":"Takes a function f and a list of initial arguments and returns a new function that takes the remaining arguments and applies f to both lists of arguments.","title":"Description"},{"location":"api/partial/#examples","text":"1 2 3 4 5 6 7 const msg = ( a , b , c ) => ` ${ a } ${ b } ${ c } ` ; partial ( msg , 'Hello' )( 'World' , '!' ); //=> \"Hello World !\" partial ( msg , 'Hello' , 'World' )( '!' ); //=> \"Hello World !\"","title":"Examples"},{"location":"api/partial/#parameters","text":"Name Type Description f function The partially applied function. init ? The initial list of arguments","title":"Parameters"},{"location":"api/partial/#return","text":"function","title":"Return"},{"location":"api/recur/","text":"recur Summary Bootstrap the next recursive call in a loop -induced recursive function. Parameters Name Type Description args ? Return Object","title":"recur"},{"location":"api/recur/#recur","text":"Summary Bootstrap the next recursive call in a loop -induced recursive function.","title":"recur"},{"location":"api/recur/#parameters","text":"Name Type Description args ?","title":"Parameters"},{"location":"api/recur/#return","text":"Object","title":"Return"},{"location":"api/some/","text":"some Summary Apply functions to arguments until one returns logical true . Description Takes one or more functions and returns another function that takes any number of parameters. Starting with the leftmost function applies each to the parameters until one returns logical true in which case all other functions are ignored and we return that value. Otherwise returns whatever the last function has returned. Examples 1 2 3 4 5 6 7 8 9 10 11 const grade = some ( when ( gte ( 1 ) , constant ( 'Perfect' )) , when ( gte ( 0.85 ), constant ( 'Good' )) , when ( gte ( 0.60 ), constant ( 'Medium' )) , when ( gte ( 0.34 ), constant ( 'Poor' )) , constant ( 'No' )); grade ( 1 ); //=> 'Perfect' grade ( 0.92 ); //=> 'Good' grade ( 0.70 ); //=> 'Medium' grade ( 0.50 ); //=> 'Poor' grade ( 0.20 ); //=> 'No' Parameters Name Type Description fns function Return function","title":"some"},{"location":"api/some/#some","text":"Summary Apply functions to arguments until one returns logical true .","title":"some"},{"location":"api/some/#description","text":"Takes one or more functions and returns another function that takes any number of parameters. Starting with the leftmost function applies each to the parameters until one returns logical true in which case all other functions are ignored and we return that value. Otherwise returns whatever the last function has returned.","title":"Description"},{"location":"api/some/#examples","text":"1 2 3 4 5 6 7 8 9 10 11 const grade = some ( when ( gte ( 1 ) , constant ( 'Perfect' )) , when ( gte ( 0.85 ), constant ( 'Good' )) , when ( gte ( 0.60 ), constant ( 'Medium' )) , when ( gte ( 0.34 ), constant ( 'Poor' )) , constant ( 'No' )); grade ( 1 ); //=> 'Perfect' grade ( 0.92 ); //=> 'Good' grade ( 0.70 ); //=> 'Medium' grade ( 0.50 ); //=> 'Poor' grade ( 0.20 ); //=> 'No'","title":"Examples"},{"location":"api/some/#parameters","text":"Name Type Description fns function","title":"Parameters"},{"location":"api/some/#return","text":"function","title":"Return"},{"location":"api/subtract/","text":"subtract Summary Functional equivalent of a - b . Tip This is an operator function . Examples Remove 2 from all numbers in the list: 1 2 map ( subtract ( 2 ))([ 3 , 4 , 5 ]); //=> [1,2,3] Parameters Name Type Description a number b number Return number","title":"subtract"},{"location":"api/subtract/#subtract","text":"Summary Functional equivalent of a - b . Tip This is an operator function .","title":"subtract"},{"location":"api/subtract/#examples","text":"Remove 2 from all numbers in the list: 1 2 map ( subtract ( 2 ))([ 3 , 4 , 5 ]); //=> [1,2,3]","title":"Examples"},{"location":"api/subtract/#parameters","text":"Name Type Description a number b number","title":"Parameters"},{"location":"api/subtract/#return","text":"number","title":"Return"},{"location":"api/take/","text":"take Summary Returns a new list with only the first n elements from xs . Tip This function is curried. Tip Act as a transducer when composed with drop , filter or map . Description Takes the first n elements from xs and returns them in a new list of the same type. An empty list of the same type is returned when n is either 0 , NaN , -Infinity or any other negative number. A full list (of the same type) is returned when n is either Infinity or greater than the number of elements in xs . Examples Works with arrays and objects. 1 2 3 4 5 6 7 const take2 = take ( 2 ); take2 ([ 1 , 2 , 3 ]); //=> [1, 2] take2 ({ a : 1 , b : 2 , c : 3 }); //=> {a: 1, b: 2} Parameters Name Type Description n number Number of elements to take. xs Array or Object List to take from. Return Array or Object","title":"take"},{"location":"api/take/#take","text":"Summary Returns a new list with only the first n elements from xs . Tip This function is curried. Tip Act as a transducer when composed with drop , filter or map .","title":"take"},{"location":"api/take/#description","text":"Takes the first n elements from xs and returns them in a new list of the same type. An empty list of the same type is returned when n is either 0 , NaN , -Infinity or any other negative number. A full list (of the same type) is returned when n is either Infinity or greater than the number of elements in xs .","title":"Description"},{"location":"api/take/#examples","text":"Works with arrays and objects. 1 2 3 4 5 6 7 const take2 = take ( 2 ); take2 ([ 1 , 2 , 3 ]); //=> [1, 2] take2 ({ a : 1 , b : 2 , c : 3 }); //=> {a: 1, b: 2}","title":"Examples"},{"location":"api/take/#parameters","text":"Name Type Description n number Number of elements to take. xs Array or Object List to take from.","title":"Parameters"},{"location":"api/take/#return","text":"Array or Object","title":"Return"},{"location":"api/unary/","text":"unary Summary Takes a function fn of any arity and returns version of it that takes exactly one parameter. Examples It easy to forget that parseInt can take a number and a radix: 1 2 3 4 [ '1' , '2' , '3' ]. map ( parseInt ); //=> [1, NaN, NaN] // equivalent to [parseInt('1', 0), parseInt('2', 1), parseInt('3', 2)] // array indices................^.................^.................^ We can avoid this with unary : 1 2 3 [ '1' , '2' , '3' ]. map ( unary ( parseInt )); //=> [1, 2, 3] // equivalent to [parseInt('1'), parseInt('2'), parseInt('3')] Parameters Name Type Description fn function Return function","title":"unary"},{"location":"api/unary/#unary","text":"Summary Takes a function fn of any arity and returns version of it that takes exactly one parameter.","title":"unary"},{"location":"api/unary/#examples","text":"It easy to forget that parseInt can take a number and a radix: 1 2 3 4 [ '1' , '2' , '3' ]. map ( parseInt ); //=> [1, NaN, NaN] // equivalent to [parseInt('1', 0), parseInt('2', 1), parseInt('3', 2)] // array indices................^.................^.................^ We can avoid this with unary : 1 2 3 [ '1' , '2' , '3' ]. map ( unary ( parseInt )); //=> [1, 2, 3] // equivalent to [parseInt('1'), parseInt('2'), parseInt('3')]","title":"Examples"},{"location":"api/unary/#parameters","text":"Name Type Description fn function","title":"Parameters"},{"location":"api/unary/#return","text":"function","title":"Return"},{"location":"api/unfold/","text":"unfold Summary Produces a list of values from x . Tip This function is curried. Description First the predicate pred is applied to x . If logical true the result of applying map to x is added to the list. Then the predicate is applied to the next value of x which is obtained by applying next to x and the process repeats until the predicate returns logical false . Examples List of ten consecutive days starting from Wednesday. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const day = x => ( x === 1 ? 'Mon' : x === 2 ? 'Tue' : x === 3 ? 'Wed' : x === 4 ? 'Thu' : x === 5 ? 'Fri' : x === 6 ? 'Sat' : 'Sun' ); unfold ( x => x < 13 // (1) , x => day ( x % 7 ) // (2) , x => x + 1 // (3) , 3 ); // (4) //=> [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"] Continues unfolding whilst the current value of x satisfies the predicate. Transforms x . The result is accumulated into the list. Returns the next value for x . Starting value for x . Parameters Name Type Description pred function unfold continues whilst the predicate applied to x returns true . map function unfold applies map to x and adds the result to the list. next function unfold determines the next value of x by applying next to it. x * Return Array.<*>","title":"unfold"},{"location":"api/unfold/#unfold","text":"Summary Produces a list of values from x . Tip This function is curried.","title":"unfold"},{"location":"api/unfold/#description","text":"First the predicate pred is applied to x . If logical true the result of applying map to x is added to the list. Then the predicate is applied to the next value of x which is obtained by applying next to x and the process repeats until the predicate returns logical false .","title":"Description"},{"location":"api/unfold/#examples","text":"List of ten consecutive days starting from Wednesday. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const day = x => ( x === 1 ? 'Mon' : x === 2 ? 'Tue' : x === 3 ? 'Wed' : x === 4 ? 'Thu' : x === 5 ? 'Fri' : x === 6 ? 'Sat' : 'Sun' ); unfold ( x => x < 13 // (1) , x => day ( x % 7 ) // (2) , x => x + 1 // (3) , 3 ); // (4) //=> [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"] Continues unfolding whilst the current value of x satisfies the predicate. Transforms x . The result is accumulated into the list. Returns the next value for x . Starting value for x .","title":"Examples"},{"location":"api/unfold/#parameters","text":"Name Type Description pred function unfold continues whilst the predicate applied to x returns true . map function unfold applies map to x and adds the result to the list. next function unfold determines the next value of x by applying next to it. x *","title":"Parameters"},{"location":"api/unfold/#return","text":"Array.<*>","title":"Return"},{"location":"api/upper/","text":"upper Summary Returns s uppercased. Examples 1 2 upper ( 'foo' ); //=> 'FOO' Parameters Name Type Description s string Return string","title":"upper"},{"location":"api/upper/#upper","text":"Summary Returns s uppercased.","title":"upper"},{"location":"api/upper/#examples","text":"1 2 upper ( 'foo' ); //=> 'FOO'","title":"Examples"},{"location":"api/upper/#parameters","text":"Name Type Description s string","title":"Parameters"},{"location":"api/upper/#return","text":"string","title":"Return"},{"location":"api/when/","text":"when Summary Returns fn(...x) if pred(...x) has returned logical true . Otherwise returns undefined . Tip This function is curried. Examples 1 2 3 4 5 when ( eq ( 40 ), add ( 2 ))( 40 ); //=> 42 when ( eq ( 40 ), add ( 2 ))( 41 ); //=> undefined Parameters Name Type Description pred function Predicate . Must return logical true . fn function Function applied to the arguments if predicate is satisfied x ? One or more arguments Return ?","title":"when"},{"location":"api/when/#when","text":"Summary Returns fn(...x) if pred(...x) has returned logical true . Otherwise returns undefined . Tip This function is curried.","title":"when"},{"location":"api/when/#examples","text":"1 2 3 4 5 when ( eq ( 40 ), add ( 2 ))( 40 ); //=> 42 when ( eq ( 40 ), add ( 2 ))( 41 ); //=> undefined","title":"Examples"},{"location":"api/when/#parameters","text":"Name Type Description pred function Predicate . Must return logical true . fn function Function applied to the arguments if predicate is satisfied x ? One or more arguments","title":"Parameters"},{"location":"api/when/#return","text":"?","title":"Return"},{"location":"api/zip/","text":"zip Summary Combine each element at the same index of two arrays. Tip This function is curried. Description Takes two arrays a and b and returns a new array where each element of a and b at the same index are put together. The length of the new array is equal to the length of the smallest array. Examples 1 2 zip ([ 1 , 2 ], [ 10 , 20 ]); //=> [[1, 10], [2, 20]] When arrays are not the same length 1 2 3 4 5 6 7 8 zip ([ 1 , 2 ], [ 10 , 20 , 30 ]); //=> [[1, 10], [2, 20]] zip ([ 1 , 2 ], [ 10 ]); //=> [[1, 10]] zip ([ 1 , 2 ], []); //=> [] zip ([], [ 10 , 20 , 30 ]); //=> [] Parameters Name Type Description a Array An array b Array Another array Return Array.<Array>","title":"zip"},{"location":"api/zip/#zip","text":"Summary Combine each element at the same index of two arrays. Tip This function is curried.","title":"zip"},{"location":"api/zip/#description","text":"Takes two arrays a and b and returns a new array where each element of a and b at the same index are put together. The length of the new array is equal to the length of the smallest array.","title":"Description"},{"location":"api/zip/#examples","text":"1 2 zip ([ 1 , 2 ], [ 10 , 20 ]); //=> [[1, 10], [2, 20]] When arrays are not the same length 1 2 3 4 5 6 7 8 zip ([ 1 , 2 ], [ 10 , 20 , 30 ]); //=> [[1, 10], [2, 20]] zip ([ 1 , 2 ], [ 10 ]); //=> [[1, 10]] zip ([ 1 , 2 ], []); //=> [] zip ([], [ 10 , 20 , 30 ]); //=> []","title":"Examples"},{"location":"api/zip/#parameters","text":"Name Type Description a Array An array b Array Another array","title":"Parameters"},{"location":"api/zip/#return","text":"Array.<Array>","title":"Return"},{"location":"api/zip3/","text":"zip3 Summary Same as zip but with three arrays. Tip This function is curried. Examples 1 2 zip3 ([ 1 , 2 ], [ 10 , 20 ], [ 100 , 200 ]); //=> [[1, 10, 100], [2, 20, 200]] Parameters Name Type Description a Array b Array c Array Return Array.<Array>","title":"zip3"},{"location":"api/zip3/#zip3","text":"Summary Same as zip but with three arrays. Tip This function is curried.","title":"zip3"},{"location":"api/zip3/#examples","text":"1 2 zip3 ([ 1 , 2 ], [ 10 , 20 ], [ 100 , 200 ]); //=> [[1, 10, 100], [2, 20, 200]]","title":"Examples"},{"location":"api/zip3/#parameters","text":"Name Type Description a Array b Array c Array","title":"Parameters"},{"location":"api/zip3/#return","text":"Array.<Array>","title":"Return"},{"location":"api/zip4/","text":"zip4 Summary Same as zip but with four arrays. Tip This function is curried. Examples 1 2 zip4 ([ 1 , 2 ], [ 10 , 20 ], [ 100 , 200 ], [ 1000 , 2000 ]); //=> [[1, 10, 100, 1000], [2, 20, 200, 2000]] Parameters Name Type Description a Array b Array c Array d Array Return Array.<Array>","title":"zip4"},{"location":"api/zip4/#zip4","text":"Summary Same as zip but with four arrays. Tip This function is curried.","title":"zip4"},{"location":"api/zip4/#examples","text":"1 2 zip4 ([ 1 , 2 ], [ 10 , 20 ], [ 100 , 200 ], [ 1000 , 2000 ]); //=> [[1, 10, 100, 1000], [2, 20, 200, 2000]]","title":"Examples"},{"location":"api/zip4/#parameters","text":"Name Type Description a Array b Array c Array d Array","title":"Parameters"},{"location":"api/zip4/#return","text":"Array.<Array>","title":"Return"},{"location":"manual/cookbook/","text":"Cookbook fold Adds all the numbers const sum = fold ( add , 0 ); sum ([ 1 , 2 , 3 ]); //=> 6 sum ({ a : 4 , b : 5 , c : 6 }); //=> 15 Finds the youngest person const youngest = fold ( ( prev , cur ) => prev == null || prev . age > cur . age ? cur : prev , null ); youngest ([ { name : 'john' , age : 21 } , { name : 'jake' , age : 18 } , { name : 'jill' , age : 37 }]); //=> {name: 'jake', age: 18} on A case-insensitive string equality function const streqi = on ( eq , lower ); streqi ( 'foo' , 'FOO' ); //=> true unfold Generate ten multiples of 5 const range = unfold ( lte ( 10 ), mult ( 5 ), inc ); range ( 1 ); //=> [5,10,15,20,25,30,35,40,45,50] Numbers between 10 and 0 included const range = unfold ( gte ( 0 ), identity , dec ); range ( 10 ); //=> [10,9,8,7,6,5,4,3,2,1,0]","title":"Cookbook"},{"location":"manual/cookbook/#cookbook","text":"","title":"Cookbook"},{"location":"manual/cookbook/#fold","text":"Adds all the numbers const sum = fold ( add , 0 ); sum ([ 1 , 2 , 3 ]); //=> 6 sum ({ a : 4 , b : 5 , c : 6 }); //=> 15 Finds the youngest person const youngest = fold ( ( prev , cur ) => prev == null || prev . age > cur . age ? cur : prev , null ); youngest ([ { name : 'john' , age : 21 } , { name : 'jake' , age : 18 } , { name : 'jill' , age : 37 }]); //=> {name: 'jake', age: 18}","title":"fold"},{"location":"manual/cookbook/#on","text":"A case-insensitive string equality function const streqi = on ( eq , lower ); streqi ( 'foo' , 'FOO' ); //=> true","title":"on"},{"location":"manual/cookbook/#unfold","text":"Generate ten multiples of 5 const range = unfold ( lte ( 10 ), mult ( 5 ), inc ); range ( 1 ); //=> [5,10,15,20,25,30,35,40,45,50] Numbers between 10 and 0 included const range = unfold ( gte ( 0 ), identity , dec ); range ( 10 ); //=> [10,9,8,7,6,5,4,3,2,1,0]","title":"unfold"},{"location":"manual/glossary/","text":"Glossary Info List of terms and concepts used throughout the library. functional placeholder A special value used in curried functions that will be substituted with the real value later on. Useful with operator functions . logical truth Any value that is neither false nor nil constitutes logical truth. Please note that 0 , '' and NaN also constitute logical truth. logical falsity Any value that is either false or nil constitutes logical falsity. nil Either null or undefined . operator function An operator function is a binary function with left and right sections. To illustrate this concept we will use the operator function subtract which is the functional equivalent of a - b . When called with one argument the operator function assumes it has been given the right section and returns a function that takes the left section: Similar to x - 2 const sub2 = subtract ( 2 ); sub2 ( 44 ); //=> 42 When called with two arguments and the second argument is the functional placeholder , the operator function assumes it has been given the left section and returns a function that takes the right section. Similar to 44 - x const subFrom44 = subtract ( 44 , __ ); subFrom44 ( 2 ); //=> 42 Operator functions in this library have been inspired by this answer from Stack Overflow . predicate A predicate is a function that uses logical truth or logical falsity to make a decision.","title":"Glossary"},{"location":"manual/glossary/#glossary","text":"Info List of terms and concepts used throughout the library.","title":"Glossary"},{"location":"manual/glossary/#functional-placeholder","text":"A special value used in curried functions that will be substituted with the real value later on. Useful with operator functions .","title":"functional placeholder"},{"location":"manual/glossary/#logical-truth","text":"Any value that is neither false nor nil constitutes logical truth. Please note that 0 , '' and NaN also constitute logical truth.","title":"logical truth"},{"location":"manual/glossary/#logical-falsity","text":"Any value that is either false or nil constitutes logical falsity.","title":"logical falsity"},{"location":"manual/glossary/#nil","text":"Either null or undefined .","title":"nil"},{"location":"manual/glossary/#operator-function","text":"An operator function is a binary function with left and right sections. To illustrate this concept we will use the operator function subtract which is the functional equivalent of a - b . When called with one argument the operator function assumes it has been given the right section and returns a function that takes the left section: Similar to x - 2 const sub2 = subtract ( 2 ); sub2 ( 44 ); //=> 42 When called with two arguments and the second argument is the functional placeholder , the operator function assumes it has been given the left section and returns a function that takes the right section. Similar to 44 - x const subFrom44 = subtract ( 44 , __ ); subFrom44 ( 2 ); //=> 42 Operator functions in this library have been inspired by this answer from Stack Overflow .","title":"operator function"},{"location":"manual/glossary/#predicate","text":"A predicate is a function that uses logical truth or logical falsity to make a decision.","title":"predicate"}]}